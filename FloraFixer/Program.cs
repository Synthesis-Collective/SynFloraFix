using System;
using System.Threading.Tasks;
using System.Collections.Generic;

using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Synthesis;

using Noggog;

using FloraFixer.Settings;

namespace SynFloraFixer
{
    public class Program
    {
        public static Lazy<FloraFixSettings> Settings = new();
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings<FloraFixSettings>("FloraFixer", "FloraFixer.json", out Settings)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynFloraFix.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            //Cleanups from TokcDK
            var floraFixScript = new VirtualMachineAdapter();
            floraFixScript.Scripts.Add(new ScriptEntry()
            {
                Name = string.IsNullOrWhiteSpace(Settings.Value.ScriptName) ? "florafix" : Settings.Value.ScriptName,
            });
            state.LoadOrder.PriorityOrder.OnlyEnabled().Tree().WinningOverrides().ForEach(tree =>
            {
                if (tree.VirtualMachineAdapter == null && tree.Ingredient != null && !tree.Ingredient.IsNull)
                {
                    var otree = state.PatchMod.Trees.GetOrAddAsOverride(tree);
                    Console.WriteLine($"Patching TREE {otree.EditorID}");
                    otree.VirtualMachineAdapter = floraFixScript;
                    if (Settings.Value.FixProductions)
                    {
                        SettingsProduction(otree.Production);
                    }
                }
            });
            state.LoadOrder.PriorityOrder.OnlyEnabled().Flora().WinningOverrides().ForEach(flora =>
            {
                if (flora.VirtualMachineAdapter == null && flora.Ingredient != null && !flora.Ingredient.IsNull)
                {
                    var otree = state.PatchMod.Florae.GetOrAddAsOverride(flora); ;
                    Console.WriteLine($"Patching FLOR {otree.EditorID}");
                    otree.VirtualMachineAdapter = floraFixScript;
                    if (Settings.Value.FixProductions)
                    {
                        SettingsProduction(otree.Production);
                    }
                    if (Settings.Value.FixActivateString)
                    {
                        var nt = SettingsActivateString(otree.ActivateTextOverride);
                    }

                }
            });
        }
        // From TokcDK Fork
        private static void SettingsProduction(SeasonalIngredientProduction? production)
        {
            var isNull = false;
            if (production == null)
            {
                production = new();
                isNull = true;
            }
            if (isNull || production.Fall == 0 || production.Spring == 0 || production.Spring == 0 || production.Winter == 0)
            {
                production.Summer = production.Summer == (byte)0 ? (byte)100 : production.Summer;
                production.Fall = production.Fall == (byte)0 ? (byte)100 : production.Fall;
                production.Winter = production.Winter == (byte)0 ? (byte)100 : production.Winter;
                production.Spring = production.Spring == (byte)0 ? (byte)100 : production.Spring;
            }
        }
        // From TokcDK Fork
        private static TranslatedString? SettingsActivateString(ITranslatedStringGetter? translatedText)
        {
            if (translatedText == null || string.IsNullOrWhiteSpace(translatedText?.String))
            {
                return new TranslatedString(Language.English, new Dictionary<Language, string>{
                    { Language.English, "Get:" },
                    { Language.Russian, "Âçÿòü:" },
                });
            }
            return null;
        }
    }
}
